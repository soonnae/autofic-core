--- a/core/appHandler.js
+++ b/core/appHandler.js
@@ -1,14 +1,13 @@
 var db = require('../models')
 var bCrypt = require('bcrypt')
-const exec = require('child_process').exec;
+const { execFile } = require('child_process');
 var mathjs = require('mathjs')
 var libxmljs = require("libxmljs");
-var serialize = require("node-serialize")
 const Op = db.Sequelize.Op
 
 module.exports.userSearch = function (req, res) {
-	var query = "SELECT name,id FROM Users WHERE login='" + req.body.login + "'";
-	db.sequelize.query(query, {
+	db.sequelize.query("SELECT name,id FROM Users WHERE login = :login", {
+		replacements: { login: req.body.login },
 		model: db.User
 	}).then(user => {
 		if (user.length) {
@@ -36,12 +35,17 @@
 }
 
 module.exports.ping = function (req, res) {
-	exec('ping -c 2 ' + req.body.address, function (err, stdout, stderr) {
-		output = stdout + stderr
+	const address = req.body.address;
+	if (!/^[a-zA-Z0-9.-]+$/.test(address)) {
+		req.flash('danger', 'Invalid address');
+		return res.render('app/ping', { output: 'Invalid address' });
+	}
+	execFile('ping', ['-c', '2', address], function (err, stdout, stderr) {
+		const output = stdout + stderr;
 		res.render('app/ping', {
 			output: output
-		})
-	})
+		});
+	});
 }
 
 module.exports.listProducts = function (req, res) {
@@ -82,7 +86,7 @@
 			output: output
 		})
 	} else {
-		db.Product.find({
+		db.Product.findOne({
 			where: {
 				'id': req.query.id
 			}
@@ -104,7 +108,7 @@
 	if (!req.body.id || req.body.id == '') {
 		req.body.id = 0
 	}
-	db.Product.find({
+	db.Product.findOne({
 		where: {
 			'id': req.body.id
 		}
@@ -125,7 +129,7 @@
 			output = {
 				product: product
 			}
-			req.flash('danger',err)
+			req.flash('danger', err)
 			res.render('app/modifyproduct', {
 				output: output
 			})
@@ -142,26 +146,16 @@
 }
 
 module.exports.userEditSubmit = function (req, res) {
-	db.User.find({
+	db.User.findOne({
 		where: {
 			'id': req.body.id
 		}
-	}).then(user =>{
-		if(req.body.password.length>0){
-			if(req.body.password.length>0){
-				if (req.body.password == req.body.cpassword) {
-					user.password = bCrypt.hashSync(req.body.password, bCrypt.genSaltSync(10), null)
-				}else{
-					req.flash('warning', 'Passwords dont match')
-					res.render('app/useredit', {
-						userId: req.user.id,
-						userEmail: req.user.email,
-						userName: req.user.name,
-					})
-					return
-				}
-			}else{
-				req.flash('warning', 'Invalid Password')
+	}).then(user => {
+		if (req.body.password.length > 0) {
+			if (req.body.password == req.body.cpassword) {
+				user.password = bCrypt.hashSync(req.body.password, bCrypt.genSaltSync(10), null)
+			} else {
+				req.flash('warning', 'Passwords dont match')
 				res.render('app/useredit', {
 					userId: req.user.id,
 					userEmail: req.user.email,
@@ -173,7 +167,7 @@
 		user.email = req.body.email
 		user.name = req.body.name
 		user.save().then(function () {
-			req.flash('success',"Updated successfully")
+			req.flash('success', "Updated successfully")
 			res.render('app/useredit', {
 				userId: req.body.id,
 				userEmail: req.body.email,
@@ -184,18 +178,26 @@
 }
 
 module.exports.redirect = function (req, res) {
-	if (req.query.url) {
-		res.redirect(req.query.url)
-	} else {
-		res.send('invalid redirect url')
+	const allowedUrls = ['http://example.com', 'http://another-example.com'];
+	if (req.query.url && allowedUrls.includes(req.query.url)) {
+		res.redirect(req.query.url);
+	} else {
+		res.send('invalid redirect url');
 	}
 }
 
 module.exports.calc = function (req, res) {
 	if (req.body.eqn) {
-		res.render('app/calc', {
-			output: mathjs.eval(req.body.eqn)
-		})
+		try {
+			const result = mathjs.evaluate(req.body.eqn);
+			res.render('app/calc', {
+				output: result
+			});
+		} catch (e) {
+			res.render('app/calc', {
+				output: 'Invalid math expression'
+			});
+		}
 	} else {
 		res.render('app/calc', {
 			output: 'Enter a valid math string like (3+3)*2'
@@ -212,37 +214,41 @@
 	})
 }
 
-module.exports.bulkProductsLegacy = function (req,res){
+module.exports.bulkProductsLegacy = function (req, res) {
 	// TODO: Deprecate this soon
-	if(req.files.products){
-		var products = serialize.unserialize(req.files.products.data.toString('utf8'))
-		products.forEach( function (product) {
-			var newProduct = new db.Product()
-			newProduct.name = product.name
-			newProduct.code = product.code
-			newProduct.tags = product.tags
-			newProduct.description = product.description
-			newProduct.save()
-		})
-		res.redirect('/app/products')
-	}else{
-		res.render('app/bulkproducts',{messages:{danger:'Invalid file'},legacy:true})
-	}
-}
-
-module.exports.bulkProducts =  function(req, res) {
-	if (req.files.products && req.files.products.mimetype=='text/xml'){
-		var products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:true,noblanks:true})
-		products.root().childNodes().forEach( product => {
+	if (req.files.products) {
+		try {
+			var products = JSON.parse(req.files.products.data.toString('utf8'));
+			products.forEach(function (product) {
+				var newProduct = new db.Product()
+				newProduct.name = product.name
+				newProduct.code = product.code
+				newProduct.tags = product.tags
+				newProduct.description = product.description
+				newProduct.save()
+			});
+			res.redirect('/app/products');
+		} catch (e) {
+			res.render('app/bulkproducts', { messages: { danger: 'Invalid file' }, legacy: true });
+		}
+	} else {
+		res.render('app/bulkproducts', { messages: { danger: 'Invalid file' }, legacy: true });
+	}
+}
+
+module.exports.bulkProducts = function (req, res) {
+	if (req.files.products && req.files.products.mimetype == 'text/xml') {
+		var products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), { noent: false, noblanks: true });
+		products.root().childNodes().forEach(product => {
 			var newProduct = new db.Product()
 			newProduct.name = product.childNodes()[0].text()
 			newProduct.code = product.childNodes()[1].text()
 			newProduct.tags = product.childNodes()[2].text()
 			newProduct.description = product.childNodes()[3].text()
 			newProduct.save()
-		})
-		res.redirect('/app/products')
-	}else{
-		res.render('app/bulkproducts',{messages:{danger:'Invalid file'},legacy:false})
-	}
-}
+		});
+		res.redirect('/app/products');
+	} else {
+		res.render('app/bulkproducts', { messages: { danger: 'Invalid file' }, legacy: false });
+	}
+}
