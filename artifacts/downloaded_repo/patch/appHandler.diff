--- a/core/appHandler.js
+++ b/core/appHandler.js
@@ -7,8 +7,9 @@
 const Op = db.Sequelize.Op
 
 module.exports.userSearch = function (req, res) {
-	var query = "SELECT name,id FROM Users WHERE login='" + req.body.login + "'";
+	var query = "SELECT name,id FROM Users WHERE login=:login";
 	db.sequelize.query(query, {
+		replacements: { login: req.body.login },
 		model: db.User
 	}).then(user => {
 		if (user.length) {
@@ -184,7 +185,8 @@
 }
 
 module.exports.redirect = function (req, res) {
-	if (req.query.url) {
+	const allowedUrls = ['https://trusted.com', 'https://another-trusted.com'];
+	if (req.query.url && allowedUrls.includes(req.query.url)) {
 		res.redirect(req.query.url)
 	} else {
 		res.send('invalid redirect url')
@@ -215,16 +217,20 @@
 module.exports.bulkProductsLegacy = function (req,res){
 	// TODO: Deprecate this soon
 	if(req.files.products){
-		var products = serialize.unserialize(req.files.products.data.toString('utf8'))
-		products.forEach( function (product) {
-			var newProduct = new db.Product()
-			newProduct.name = product.name
-			newProduct.code = product.code
-			newProduct.tags = product.tags
-			newProduct.description = product.description
-			newProduct.save()
-		})
-		res.redirect('/app/products')
+		try {
+			var products = JSON.parse(req.files.products.data.toString('utf8'))
+			products.forEach( function (product) {
+				var newProduct = new db.Product()
+				newProduct.name = product.name
+				newProduct.code = product.code
+				newProduct.tags = product.tags
+				newProduct.description = product.description
+				newProduct.save()
+			})
+			res.redirect('/app/products')
+		} catch (e) {
+			res.render('app/bulkproducts',{messages:{danger:'Invalid file'},legacy:true})
+		}
 	}else{
 		res.render('app/bulkproducts',{messages:{danger:'Invalid file'},legacy:true})
 	}
@@ -232,7 +238,7 @@
 
 module.exports.bulkProducts =  function(req, res) {
 	if (req.files.products && req.files.products.mimetype=='text/xml'){
-		var products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:true,noblanks:true})
+		var products = libxmljs.parseXmlString(req.files.products.data.toString('utf8'), {noent:false,noblanks:true})
 		products.root().childNodes().forEach( product => {
 			var newProduct = new db.Product()
 			newProduct.name = product.childNodes()[0].text()
